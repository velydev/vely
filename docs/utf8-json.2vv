.TH VELY 2vv $VERSION $DATE Development Tools
.SH NAME
utf8-json \-  (UTF8)
.SH PURPOSE
Convert UTF8 string to JSON text.

.SH SYNTAX

.RS 4
.EX

utf8-json <utf8> \\
    to [ define ] <json> \\
    [ length <length> ] \\
    [ status [ define ] <status> ] \\
    [ error-text [ define ] <error text> ]

.EE
.RE

.SH DESCRIPTION
utf8-json will convert <utf8> text to <json> text which can be created with optional "define". <json> is \fBallocated memory\fP.

<utf8> is a string that may contain UTF8 characters (as 2, 3 or 4 bytes representing a unicode character). Encoding creates a string that can be used as a value in JSON documents. utf8-json is performed according to \fBRFC7159\fP (JSON standard) and \fBRFC3629\fP (UTF8 standard).

Note that hexadecimal characters used in JSON for Unicode (such as \eu21d7) are always lowercase. Solidus character ("/") is not escaped, although \fBjson-utf8\fP will correctly process it if the input has it escaped.

<json> is always allocated in utf8-json with storage sufficient to hold it.

The optional length of <utf8> can be specified with <length> in "length" clause. If <length> is not specified, it is calculated as string length of <utf8>.

The status of encoding can be obtained in optional <status> variable (a number), which can be created with optional "define". <status> is the string length of the result in <json> or -1 if error occurred, in which case the error text can be obtained in <error text> in optional "error-text" clause, which can be created with optional "define".

.SH EXAMPLES
Convert UTF8 string to JSON value and verify the expected result:

.RS 4
.EX

// UTF8 string 
char utf8_str[] = "\[char92]"Doc\[char92]"\en\et\eb\ef\er\et‚áó‚áò\et‚ñ∑‚óÆùÑû·è´‚≤†—à\en/\[char92]"()\et";

// Convert UTF8 string to text
utf8-json utf8_str status define encstatus to define json_text

// This is the text expected
(( define expected_result
@\[char92]"Doc\[char92]"\en\et\eb\ef\er\et\eu21d7\eu21d8\et\eu25b7\eu25ee\eud834\eudd1e\eu13eb\eu2ca0\eu0448\en/\[char92]"()\et
))

// Make sure conversion was okay, decs is the length of the result (encj string)
if (!strcmp (json_text, expected_result) && encstatus!=-1) {
    @decode-json worked okay
}

.EE
.RE

.SH SEE ALSO
 \fIUTF8\fP ( \fBjson-utf8\fP   \fButf8-json\fP  )  \fISEE ALL\fP (\fBdocumentation\fP)
