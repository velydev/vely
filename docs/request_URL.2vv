.TH VELY 2vv $VERSION $DATE Development Tools
.SH NAME
request_URL \- Vely documentation (requests)
.SH DESCRIPTION

.LP
.B APPLICATION PATH
.LP

A \fBrequest\fP URL is a URL that calls your Vely code. The leading part of its path is called "application path" and is determined by the caller; it is usually specified in a web proxy configuration or in an environment for command-line programs.

By default, application path is assumed to be the application name (see \fBhow_vely_works\fP), and would be:

.RS 4
.EX

/<app name>

.EE
.RE

So if your application name is "shopping", then the default application path is:

.RS 4
.EX

/shopping

.EE
.RE

You would then specify this application path in the client, for instance:

.RS 4
\[bu]    
in Apache configuration file (see for example \fBconnect_apache_unix_socket\fP):

.RS 4
.EX

ProxyPass "/shopping" unix:///var/lib/vv/shopping/sock/sock|fcgi://localhost/shopping

.EE
.RE

.RE


.RS 4
\[bu]    
in Nginx configuration file (see for example \fBconnect_nginx_unix_socket\fP):

.RS 4
.EX

location /shopping { include /etc/nginx/fastcgi_params; fastcgi_pass  unix:///var/lib/vv/shopping/sock/sock; }

.EE
.RE

.RE


.RS 4
\[bu]    
in a command-line program as the SCRIPT_NAME environment variable (see \fBcommand_line\fP):

.RS 4
.EX

export SCRIPT_NAME="/shopping"

.EE
.RE

.RE



.LP
.B REQUEST PATH
.LP

Request path is always the first path segment after the application path that has the request name, for instance:

.RS 4
.EX

https://some.web.site/shopping/buy-item

.EE
.RE

In this case the request name is "buy_item" (written as request path "/buy-item"). Note that hyphen ("-") in the URL name is always converted to underscore ("_") for a Vely request name. This is true for all input parameters, see \fBinput-param\fP.

A request name can be can be made up of alphanumeric characters, hyphen or underscore only and cannot start with a digit. Often it is in the same form as the names of Vely \fBstatement_APIs\fP, which is that of "verb"-"object", for example "add-note", "show-orders" etc. This form clearly communicates the functional purpose of the request in the URL itself, as well as the names of source code files that handle them, which in this case would be "add_note.vely", "show_orders.vely" etc. Note however you can name a request any way you like.

.LP
.B URL PAYLOAD
.LP

The actual URL payload, i.e. the input parameters, follow after the request path. For example, the full URL may be:

.RS 4
.EX

https://some.web.site/shopping/buy-item?name=ABC&price=600

.EE
.RE

Here, the required request name is "buy_item" and there are two other parameters ("name" and "price") with values of "ABC" and "600" respectively (see \fBrequest\fP). 

The input parameters can also be specified as path segments in the form of "/name/value". This is often done when writing a \fBREST\fP API. So for example, the above URL can be:

.RS 4
.EX

https://some.web.site/shopping/buy-item/name/ABC?price=600

.EE
.RE

You can specify some or all parameters as path segments, so for example to specify all of them, the above URL can be written as:

.RS 4
.EX

https://some.web.site/api/v2/shopping/buy-item/name/ABC/price/600

.EE
.RE

The very last path segment can miss a value, and by default it would be "true", so if you add a parameter "edit":

.RS 4
.EX

https://some.web.site/api/v2/shopping/buy/name/ABC/price/600/edit

.EE
.RE

then this would be the same URL as before with the additional parameter "edit" of value "true". 

If you specify input parameters as path segments, keep in mind that the path is meant to represent a logical hierarchy, where each path segment precedes in meaning the previous. In other words, input parameters representing a broader logical notion come first in the path, and those with a narrower one come afterwards. This order may represent the resource hierarchy (as it is often done with REST), but it does not have to.

.LP
.B CUSTOMIZING APPLICATION PATH
.LP

The application path can be customized to be any path you wish, but it must have the application name as the last segment:

.RS 4
.EX

/some/path/<app name>

.EE
.RE

This helps identify application at a glance. For example, if your application name is "shopping", the application path may be 

.RS 4
.EX

/api/v2/shopping

.EE
.RE

and would be specified like this:

.RS 4
\[bu]    
in Apache configuration file (see for example \fBconnect_apache_unix_socket\fP):

.RS 4
.EX

ProxyPass "/api/v2/shopping" unix:///var/lib/vv/shopping/sock/sock|fcgi://localhost/shopping

.EE
.RE

.RE


.RS 4
\[bu]    
in Nginx configuration file (see for example \fBconnect_nginx_unix_socket\fP):

.RS 4
.EX

location /api/v2/shopping { include /etc/nginx/fastcgi_params; fastcgi_pass  unix:///var/lib/vv/shopping/sock/sock; }

.EE
.RE

.RE


.RS 4
\[bu]    
in a command-line program as the SCRIPT_NAME environment variable (see \fBcommand_line\fP):

.RS 4
.EX

export SCRIPT_NAME="/api/v2/shopping"

.EE
.RE

.RE


For web requests, the URL sent by the caller might look something like this:

.RS 4
.EX

https://some.web.site/api/v2/shopping/buy-item?name=ABC&price=600

.EE
.RE

To tell Vely what the custom application path is, specify it in the "--path" parameter in \fBvv\fP when making your application, in this case:

.RS 4
.EX

vv -q --path="/api/v2/shopping"

.EE
.RE


.LP
.B PARAMETERS
.LP

It is up to you how you structure your parameters, i.e. the order in a query path or path segments, and which ones (if any) are in a query string. Regardless of your choices, the code handling a request is the same. In the example used here, you can obtain the parameters in request handler source file "buy_item.vely":

.RS 4
.EX

\[char35]include "vely.h"

void buy_item() {
    out-header default

    input-param name
    input-param price

    run-query @mydb = "insert into orders (name, price) values ('%s', '%s')" : name, price no-loop
    @OKAY
}

.EE
.RE


.LP
.B MAXIMUM LENGTH
.LP

Maximum length of a request URL is 2500 bytes.

.LP
.B NORMALIZED URL
.LP

You can also write URLs where the entire request, including the request name, is in the query string. See \fBnormalized_URL\fP.
.SH SEE ALSO
 
.B - Requests

\fBafter_request_handler\fP  
\fBbefore_request_handler\fP  
\fBbuilding_URL\fP  
\fBgetting_URL\fP  
\fBglobal_request_data\fP  
\fBnon_request\fP  
\fBnormalized_URL\fP  
\fBrequest\fP  
\fBrequest_URL\fP  
\fBstartup_handler\fP  
\fBvely_dispatch_request\fP    
See all 
\fBdocumentation\fP
