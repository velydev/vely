.TH VELY 2vv $VERSION $DATE Development Tools
.SH NAME
how_vely_works \- Vely documentation (general)
.SH DESCRIPTION

.LP
.B CREATING AN APPLICATION
.LP

A Vely application <app name> is created by an application owner, i.e. an Operating System user who will own its processes and data, by using \fBvf\fP, such as:

.RS 4
.EX

sudo vf -i -u $(whoami) <app name>

.EE
.RE

This will create directory structure described here. Vely application can be used as a \fBFastCGI\fP server, a \fBcommand_line\fP program or a \fBCGI\fP program. Note that vf is the only Vely utility requiring sudo privileges, and only for application creation.

If you will build an application from source code, the above vf command must run in the directory that contains the application source code. Each application must be in its own separate directory which contains all of its source code.

.LP
.B HOW VELY WORKS: CODE, REQUESTS AND PROCESSES
.LP

In a single step, Vely code (.vely files) is precompiled entirely into C, linked, and ready to run as a command-line program or as an application server, or both. Error reporting is based on Vely source code (.vely files), though you can specify generated code lines to be used. 

\fBvv\fP will preprocess .vely source files and generate C code for supported \fBstatement_APIs\fP (database, file, strings etc.). Then, vv builds both a command-line program and a FastCGI application server executable for application <app name> (the name <app name> is specified when running \fBvf\fP with "-i" flag to create the application). Executables created are located in directory:

.RS 4
.EX

/var/lib/vv/bld/<app name>

.EE
.RE

A FastCGI application runs as a daemon, i.e. it runs in the background and does not exit, serving incoming requests. Typically, a number of FastCGI processes are started to serve incoming processes in parallel; each process serves a single request at a time and thus can serve great many requests during its lifetime; in adaptive mode, the number of processes running may vary according to the load - including zero running processes for near-zero memory usage.

A command-line program works exactly the same way as a FastCGI application; it takes the same input and produces the same output. A command-line program runs as a single process and processes a single request.

.LP
.B .VELY FILES AND REQUESTS
.LP

Files with the .vely extension are Vely source files. You must have at least one Vely source file (.vely file). If a Vely source file starts with an underscore, it is a \fBnon_request\fP file, which can implement anything; otherwise it is a \fBrequest\fP file. A request file implements a request handler, which handles a \fBrequest_URL\fP sent by the client (such as reverse proxies like Apache or Nginx) or provided to \fBcommand_line\fP program via environment variables. 


.LP
.B REQUESTS AND REQUEST HANDLERS
.LP

To specify the request handler, specify its name in the URL after the application path (see \fBrequest_URL\fP). A request handler must implement a function named after the base name of .vely file. For example, in a URL such as:

.RS 4
.EX

/stocks/add-stock?ticker=ABC&price=130

.EE
.RE

the application path is "/stocks" (by default it's the application name) and the request name is "add_stock" (hyphens are converted to underscore by Vely). The request name handler must be implemented as function 

.RS 4
.EX

void add_stock() {...}

.EE
.RE
 
in file add_stock.vely. 

This correlation between requests and file names makes it easy to find the code you want and to maintain it. Vely will generate the code that will automatically route input requests to the appropriate code based on the request name, so in the above example Vely will automatically invoke function add_stock() implemented in file "add_stock.vely" with input parameters "ticker" and "price" (and their values) available via \fBinput-param\fP statement:

.RS 4
.EX

void add_stock() {
    input-param ticker
    input-param price
    ...
}

.EE
.RE


.LP
.B NON-REQUEST SOURCE CODE
.LP

Not every source code file was meant to handle a request. You might have a number of \fBnon_request\fP files that implement other code, such as commonly used functions. Such files are non-request source code and their names must start with underscore ("_"). 

For example, file "_display_table.vely" might implement a common HTML table displaying code, which is used in various request handlers.

Some non-request source files have predefined meaning: "_startup.vely" (\fBstartup_handler\fP), "_before.vely" (\fBbefore_request_handler\fP) and "_after.vely" (\fBafter_request_handler\fP).

.LP
.B BUILDING AN APPLICATION, MAKEFILE
.LP

Vely builds an application by looking at .vely and .h files present in the current directory. Therefore you don't have to write a Makefile. 

You don't have to specify what source code your application uses - all .vely files will be automatically picked up and compiled, and \fBrequest\fP handlers (.vely files that don't start with an underscore) are used to generate \fBvely_dispatch_request\fP.vely file (a request-dispatcher). Thus, it is easy to view at a glance what kind of requests an application serves and what is its general purpose. Files with .h extension are standard C include files and are automatically included. 

You can see the default implementations for all auto-generated files in directory

.RS 4
.EX

/var/lib/vv/bld/<app name>

.EE
.RE

An example of building a Vely application is:

.RS 4
.EX

vv -q --db=mariadb:notes 

.EE
.RE

"-q" options is the most important one - it specifies that you intend to build. In this instance, MariaDB database (named "notes") is used.

Vely builds an application using standard Linux "make" mechanism. Note that when you change the command line options (see \fBvv\fP) in a build statement like above, it has the effect of "make clean", recompiling source files.

.LP
.B DIRECTORIES AND FILES
.LP

While you can keep and compile Vely source files in any directory, the directories used by Vely are always under /var/lib/vv directory. A Vely application is always owned by a single Operating System user, while different applications can be owned by different users. This is the directory structure:

.RS 4
\[bu]    
/var/lib/vv/bld/<app name>
Build directory is where your FastCGI application executable is built, with name <app name>.fcgi. The command-line executable is named <app name>. This is a scratch-pad directory, so do not alter files in it, or use for anything else.

.RE

.RS 4
\[bu]    
/var/lib/vv/<app name>
Application directory. All application data, including internals such as sockets, are kept here. Each such directory is owned by its owner with 700 privileges, preventing other users from accessing its files.

.RE

.RS 4
\[bu]    
/var/lib/vv/<app name>/app 
Application home directory. This is the current working directory when your application runs. Copy here any files and directories your application needs.

.RE

.RS 4
\[bu]    
/var/lib/vv/<app name>/app/file
\fBfile_storage\fP used for uploads and new document creation. Do not write there directly; Vely does that for you, such as with \fBuniq-file\fP for instance, or when uploading files.

.RE

.RS 4
\[bu]    
/var/lib/vv/<app name>/app/trace
Process tracing is written in per-process files if "--trace" option is used (see \fBvv\fP). Note that a special file "backtrace" is appended to when program crashes (or \fBreport-error\fP statement is used), and this file shows a full source backtrace, allowing for easier debugging. In order to see Vely source code lines, you must use "--debug" option. You can use "--c-lines" in order to show the source code lines of the generated C code, instead of Vely code.

.RE

.RS 4
\[bu]    
/var/lib/vv/<app name>/app/db
Database configuration directory contains the \fBdatabase_config_file\fPs used by Vely to connect to databases. 

.RE

While Vely directories are fixed, you can effectively change their location by creating a soft link. This way, your directories and files can be elsewhere, even on a different disk. For example, to house your files on a different disk:

.RS 4
.EX

ln -s /home/disk0/file /var/lib/vv/<app name>/app/file

.EE
.RE


.LP
.B REMOTE CALLS
.LP

You can make remote requests, i.e. requests to other \fBFastCGI\fP servers by using \fBcall-server\fP statement, including unlimited number of parallel remote requests, meaning executing in separate threads at the same time without any thread programming on developer's part. 

Because Vely processes that execute remote requests are kept alive, the cost of starting and terminating requests is zero. That's why this method of parallel distributed computing is very fast; it is also easier and safer because each request executed in parallel does not need to be MT-safe, since such requests execute in separate single-threaded processes. The cost of these processes vs threads is generally small on Linux and because Vely creates lightweight native executables.

.LP
.B MEMORY ALLOCATION
.LP

Vely uses its own memory allocator based on standard Linux malloc family of functions. It is used internally and for allocating the results of any statements (each statement's documentation specifies which results, if any, are such). The memory will be automatically freed upon the completion of the request - you can also explicitly free them if you need to. This approach avoids costly errors, crashes and memory leaks. See \fBmemory_handling\fP.

.LP
.B DATA TYPES
.LP

Vely \fBstatement_APIs\fP use mostly strings (char* type only, i.e. no "const char*") and numbers ("num" type, which is "long long" for maximum range of uses, "num32" for a 32-bit integer, "dbl" for a double precision number), "bool" (with true and false value as provided by stdbool.h) and other data types as specified. When a "number" is specified anywhere without an additional qualification, it is assumed to be of "num" type. If a type is not specified, it is either a string or a number, depending on the context in which it is used - in those cases the type is not specified for simplicity. 

.LP
.B NAMES OF OBJECTS
.LP

Do not use object names (such as variables, functions, types) that start with "_vv", "_vely", "vv" or "vely" as those are reserved by Vely.

.LP
.B LIBRARIES
.LP

You can use any external libraries with Vely (see "--lflag", "--cflag" with \fBvv\fP). For the implementation of its own functionality, Vely uses standard libraries wherever possible (such as cURL, OpenSSL, PostgreSQL, MariaDB, SQLite etc.). Those libraries are loaded when needed automatically; thus the run-time memory usage is minimized based on your program needs.
.SH SEE ALSO
 
.B - General

\fBdeploying_application\fP  
\fBhow_vely_works\fP  
\fBquality_control\fP  
\fBrename_files\fP  
\fBSELinux\fP  
\fBvely\fP  
\fBvely_architecture\fP  
\fBvely_removal\fP  
\fBvf\fP  
\fBvv\fP  
\fBwhy_C_and_Vely\fP    
See all 
\fBdocumentation\fP
